//go:build !convgen

// Code generated by github.com/sublee/convgen@dev. DO NOT EDIT.
//
package main

import (
	"github.com/sublee/convgen/cmd/vs-goverter/api"
	convgenerrors "github.com/sublee/convgen/pkg/convgenerrors"
	"time"
)

// convgen: explicit converters

func ConvgenVersion(in User) (out api.User, err error) {
	// User.ID -> api.User.Id
	{
		out.Id = func(u unique) string { return u.String() }(in.ID)
	}
	// User.Name -> api.User.Firstname
	{
		var err4 error
		var err5 error
		out.Firstname, err5 = firstname(in.Name)
		if err5 != nil {
			err4 = convgenerrors.Wrap("User.Name", err5)
		}
		if err4 != nil {
			err = err4
			goto end
		}
	}
	// User.Name -> api.User.Lastname
	{
		var err6 error
		var err7 error
		out.Lastname, err7 = lastname(in.Name)
		if err7 != nil {
			err6 = convgenerrors.Wrap("User.Name", err7)
		}
		if err6 != nil {
			err = err6
			goto end
		}
	}
	// User.URLs -> api.User.Urls
	{
		out.Urls = make([]string, len(in.URLs))
		for i, v := range in.URLs {
			out.Urls[i] = v
		}
	}
	// User.Role -> api.User.Role
	{
		out.Role = convgenVersionUserRole(in.Role)
	}
	// User.CreateTime -> api.User.CreatedAt
	{
		out.CreatedAt = func(t time.Time) int64 { return t.Unix() }(in.CreateTime)
	}
	goto end
end:
	if err != nil {
		out = *new(api.User)
	}
	return
}

func convgenVersionUserRole(in UserRole) (out api.UserRole) {
	switch in {
	case UserRoleAdmin:
		out = api.Admin
	case UserRoleGuest:
		out = api.Guest
	case UserRoleMember:
		out = api.Member
	default:
		out = api.UserRoleUnspecified
	}
	return
}

// convgen.go:

// avoid unused error
var _ = convgenVersionUserRole
