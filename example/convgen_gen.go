//go:build !convgen

// Code generated by github.com/sublee/convgen@dev. DO NOT EDIT.
//
package main

import (
	"bytes"
	"encoding/json"
	"example.com/convgenexample/api"
	"example.com/convgenexample/db"
	"example.com/convgenexample/pb"
	"fmt"
	convgenerrors "github.com/sublee/convgen/pkg/convgenerrors"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"strconv"
)

// convgen: explicit converters

func PBtoDB(in *pb.Job) (out db.Job) {
	if in != nil {
		// (*pb.Job).Id -> db.Job.ID
		{
			out.ID = (*in).Id
		}
		// (*pb.Job).Status -> db.Job.Status
		{
			out.Status = PBtoDB_status((*in).Status)
		}
	}
	return
}

func PBtoDB_status(in pb.Status) (out db.JobStatus) {
	switch in {
	case pb.Status_STATUS_DOING:
		out = db.JobStatusDoing
	case pb.Status_STATUS_DONE:
		out = db.JobStatusDone
	case pb.Status_STATUS_TODO:
		out = db.JobStatusTodo
	default:
		out = db.JobStatusTodo
	}
	return
}

func DBtoPB(in db.Job) (out *pb.Job) {
	if out == nil {
		out = new(pb.Job)
	}
	// db.Job.ID -> (*pb.Job).Id
	{
		(*out).Id = in.ID
	}
	// db.Job.Status -> (*pb.Job).Status
	{
		(*out).Status = DBtoPB_status(in.Status)
	}
	return
}

func DBtoPB_status(in db.JobStatus) (out pb.Status) {
	switch in {
	case db.JobStatusDoing:
		out = pb.Status_STATUS_DOING
	case db.JobStatusDone:
		out = pb.Status_STATUS_DONE
	case db.JobStatusTodo:
		out = pb.Status_STATUS_TODO
	default:
		out = pb.Status_STATUS_UNSPECIFIED
	}
	return
}

func PBtoAPI(in *pb.Job) (out api.Job) {
	if in != nil {
		// (*pb.Job).Id -> api.Job.Id
		{
			out.Id = Itoa64((*in).Id)
		}
		// (*pb.Job).Status -> api.Job.Status
		{
			out.Status = PBtoAPI_status((*in).Status)
		}
	}
	return
}

func PBtoAPI_status(in pb.Status) (out api.Status) {
	switch in {
	case pb.Status_STATUS_DOING:
		out = api.Doing
	case pb.Status_STATUS_DONE:
		out = api.Done
	case pb.Status_STATUS_TODO:
		out = api.Todo
	case pb.Status_STATUS_UNSPECIFIED:
		out = api.Unspecified
	default:
		out = api.Unspecified
	}
	return
}

func APItoPB(in api.Job) (out *pb.Job, err error) {
	if out == nil {
		out = new(pb.Job)
	}
	// api.Job.Id -> (*pb.Job).Id
	{
		var err2 error
		var err3 error
		(*out).Id, err3 = Atoi64(in.Id)
		if err3 != nil {
			err2 = convgenerrors.Wrap("api.Job.Id", err3)
		}
		if err2 != nil {
			err = err2
			goto end
		}
	}
	// api.Job.Status -> (*pb.Job).Status
	{
		(*out).Status = APItoPB_status(in.Status)
	}
	goto end
end:
	if err != nil {
		out = *new(*pb.Job)
	}
	return
}

func APItoPB_status(in api.Status) (out pb.Status) {
	switch in {
	case api.Doing:
		out = pb.Status_STATUS_DOING
	case api.Done:
		out = pb.Status_STATUS_DONE
	case api.Todo:
		out = pb.Status_STATUS_TODO
	case api.Unspecified:
		out = pb.Status_STATUS_UNSPECIFIED
	default:
		out = pb.Status_STATUS_UNSPECIFIED
	}
	return
}

// main.go:

func Itoa64(i int64) string {
	return strconv.Itoa(int(i))
}

func Atoi64(s string) (int64, error) {
	i, err := strconv.Atoi(s)
	return int64(i), err
}

func pb2JSON(pb proto.Message) string {
	j, err := protojson.Marshal(pb)
	if err != nil {
		panic(err)
	}

	// Normalize the JSON output for consistent comparison.
	var b bytes.Buffer
	_ = json.Compact(&b, j)
	return b.String()
}

func main() {
	// Output: db.Job{ID:42, Status:"doing"}
	pbJob := &pb.Job{Id: 42, Status: pb.Status_STATUS_DOING}
	dbJob := PBtoDB(pbJob)
	fmt.Printf("%#v\n", dbJob)

	// Output: {"id":"42","status":"STATUS_DOING"}
	pbJob2 := DBtoPB(dbJob)
	pbJob2JSON := pb2JSON(pbJob2)
	fmt.Println(pbJob2JSON)

	// Output: api.Job{Id:"42", Status:"doing"}
	apiJob := PBtoAPI(pbJob)
	fmt.Printf("%#v\n", apiJob)

	// Output: {"id":"42","status":"STATUS_DOING"}
	pbJob3, err := APItoPB(apiJob)
	if err != nil {
		panic(err)
	}
	pbJob3JSON := pb2JSON(pbJob3)
	fmt.Println(pbJob3JSON)
}
